import os
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional
from collections import defaultdict
from enum import Enum
from contextlib import asynccontextmanager

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot, Message
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –¢–µ–∫—Å—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
import texts
from utils.database import (
    check_subscription,
    is_user_banned,
    init_user_data,
    allow_request_token_bucket,
)
from utils.moderation import moderate_text
from utils.prompt_engine import generate_enhanced_prompt

# ========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ========================
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_CATEGORY, TYPING_PROMPT = range(2)

# –õ–æ–≥–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs('logs', exist_ok=True)
os.makedirs('data', exist_ok=True)
os.makedirs('images', exist_ok=True)
init_user_data()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot_logger = logging.getLogger('bot_errors')
bot_logger.setLevel(logging.ERROR)
bot_handler = logging.FileHandler('logs/bot_errors.log', encoding='utf-8')
bot_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
bot_logger.addHandler(bot_handler)

user_logger = logging.getLogger('user_requests')
user_logger.setLevel(logging.INFO)
user_handler = logging.FileHandler('logs/user_requests.log', encoding='utf-8')
user_handler.setFormatter(logging.Formatter('%(asctime)s - User %(message)s'))
user_logger.addHandler(user_handler)

# –ú—è–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–æ–≤
user_last_request: Dict[int, datetime] = defaultdict(lambda: datetime.min)

# ========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# ========================
class Stage(str, Enum):
    COURSE = "course"
    STAGE1 = "stage1_prompt"
    STAGE2 = "stage2_book"
    STAGE3 = "stage3_code"
    STAGE4 = "stage4_image"
    STAGE5 = "stage5_video"

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ø–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
STAGE_IMAGES = {
    Stage.COURSE: 'images/prompt6.jpg',
    Stage.STAGE1: 'images/prompt1.jpg',
    Stage.STAGE2: 'images/prompt2.jpg',
    Stage.STAGE3: 'images/prompt3.jpg',
    Stage.STAGE4: 'images/prompt4.jpg',
    Stage.STAGE5: 'images/prompt5.jpg'
}

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['BOT_TOKEN', 'GIGACHAT_AUTHORIZATION_KEY', 'CHANNEL_ID']
    missing = [v for v in required_vars if not os.getenv(v)]
    if missing:
        raise EnvironmentError(f"Missing env vars: {', '.join(missing)}")
    
    try:
        int(os.getenv('CHANNEL_ID'))
    except (ValueError, TypeError):
        raise EnvironmentError("CHANNEL_ID must be a valid integer")

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –≠—Ç–∞–ø–∞ 1: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(texts.BTN_QUESTION, callback_data='category_question'),
            InlineKeyboardButton(texts.BTN_EVENT, callback_data='category_event'),
            InlineKeyboardButton(texts.BTN_ADVICE, callback_data='category_advice')
        ],
        [
            InlineKeyboardButton(texts.BTN_BOOK, callback_data='open_stage2'),
            InlineKeyboardButton(texts.BTN_CREATE_BOT, callback_data='open_stage3')
        ],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=Stage.COURSE.value)]
    ])

def get_stage1_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ 1"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(texts.BTN_QUESTION, callback_data='category_question'),
            InlineKeyboardButton(texts.BTN_EVENT, callback_data='category_event'),
            InlineKeyboardButton(texts.BTN_ADVICE, callback_data='category_advice')
        ],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=Stage.COURSE.value)]
    ])

def get_course_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—É—Ä—Å–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("1Ô∏è‚É£ –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data=Stage.STAGE1.value)],
        [InlineKeyboardButton("2Ô∏è‚É£ –ö–Ω–∏–≥–∞ –æ —Å–µ–±–µ", callback_data=Stage.STAGE2.value)],
        [InlineKeyboardButton("3Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–¥–∞", callback_data=Stage.STAGE3.value)],
        [InlineKeyboardButton("4Ô∏è‚É£ –ö–∞—Ä—Ç–∏–Ω–∫–∏: –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data=Stage.STAGE4.value)],
        [InlineKeyboardButton("5Ô∏è‚É£ –í–∏–¥–µ–æ: —Å—Ç–æ—Ä–∏–±–æ—Ä–¥-–ø—Ä–æ–º–ø—Ç", callback_data=Stage.STAGE5.value)],
    ])

def get_after_result_keyboard(next_stage: Optional[Stage] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    rows = []
    if next_stage:
        rows.append([InlineKeyboardButton("‚û°Ô∏è –ö —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É", callback_data=next_stage.value)])
    rows.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=Stage.COURSE.value)])
    rows.append([InlineKeyboardButton(texts.BTN_NEW, callback_data='new_prompt')])
    return InlineKeyboardMarkup(rows)

def get_book_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –∫–Ω–∏–≥–∏"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='start_book')],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=Stage.COURSE.value)]
    ])

def get_bot_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–¥–∞", callback_data='create_bot')],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=Stage.COURSE.value)]
    ])

@asynccontextmanager
async def typing_action(app: Application, chat_id: int):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—á–∞—Ç–∏"""
    try:
        await app.bot.send_chat_action(chat_id, action=ChatAction.TYPING)
        yield
    finally:
        pass

# ========================
# –ö–ª–∞—Å—Å –±–æ—Ç–∞
# ========================
class PromptBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        self.channel_id = int(os.getenv('CHANNEL_ID'))
        self.application = Application.builder().token(self.token).build()
        self.bot_instance = Bot(token=self.token)

    async def send_html_message(self, chat_id: int, text: str, reply_markup=None, **kwargs) -> Optional[Message]:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å–æ–æ–±—â–µ–Ω–∏–π —Å fallback"""
        try:
            return await self.application.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML',
                **kwargs
            )
        except Exception as e:
            bot_logger.error(f"HTML send error for chat {chat_id}: {type(e).__name__}")
            # Fallback: —É–±–∏—Ä–∞–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É
            clean_text = text.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', '')
            clean_text = clean_text.replace('<i>', '').replace('</i>', '').replace('<a href="', '').replace('">', '').replace('</a>', '')
            
            try:
                return await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=clean_text[:4096],
                    reply_markup=reply_markup,
                    **kwargs
                )
            except Exception:
                bot_logger.error("Fallback send also failed")
                return None

    async def send_html_with_photo(self, chat_id: int, photo_path: str, caption: str, reply_markup=None, **kwargs) -> Optional[Message]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
        try:
            with open(photo_path, 'rb') as photo:
                return await self.application.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption[:1024],
                    reply_markup=reply_markup,
                    parse_mode='HTML',
                    **kwargs
                )
        except FileNotFoundError:
            return await self.send_html_message(chat_id, caption, reply_markup, **kwargs)
        except Exception as e:
            bot_logger.error(f"Photo send error: {type(e).__name__}")
            return await self.send_html_message(chat_id, caption, reply_markup, **kwargs)

    async def show_generation_status(self, chat_id: int, message: str = "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ–º–ø—Ç...") -> Optional[Message]:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        return await self.send_html_message(chat_id, message)

    async def send_prompt_template(self, user_id: int, prompt_text: str, footer: Optional[str] = None, 
                                 category: Optional[str] = None, next_stage: Optional[Stage] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        full_message = texts.SUCCESSFUL_GENERATION_TEMPLATE.format(prompt_text)
        full_message += (footer or texts.GENERATION_FOOTER)
        full_message += texts.CONTINUE_FOOTER

        if len(full_message) > 4096:
            full_message = full_message[:4090] + " [...]"

        await self.send_html_message(user_id, full_message, get_after_result_keyboard(next_stage))

    async def check_user_access(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if is_user_banned(user_id):
            await self.send_html_message(user_id, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return False
        
        if not await check_subscription(user_id, self.channel_id, self.bot_instance):
            keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.COURSE], 
                                          texts.NOT_SUBSCRIBED_MESSAGE, reply_markup)
            return False
        
        return True

    async def check_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        allowed, wait_sec = allow_request_token_bucket(
            user_id=user_id,
            capacity=float(os.getenv("TB_CAPACITY", 30)),
            refill_per_sec=float(os.getenv("TB_REFILL_PER_SEC", 0.5)),
            cost=1.0
        )
        
        if not allowed:
            await self.send_html_message(user_id, f"üö¶ –ú–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ ~{int(wait_sec)} —Å–µ–∫.")
            return False
        
        return True

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id

            if not await self.check_user_access(user_id):
                return ConversationHandler.END

            context.user_data.clear()
            await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.COURSE], 
                                          texts.COURSE_WELCOME, get_course_menu_keyboard())
            return SELECTING_CATEGORY

        except Exception as e:
            bot_logger.error(f"Start error: {type(e).__name__} - {str(e)[:200]}")
            await self.send_html_message(update.effective_chat.id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        user_id = update.effective_user.id
        await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.COURSE], 
                                      texts.COURSE_WELCOME, get_course_menu_keyboard())
        return SELECTING_CATEGORY

    async def handle_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≠—Ç–∞–ø–∞ 1 –∏ –ø—Ä—è–º—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id

            if not await self.check_user_access(user_id):
                return SELECTING_CATEGORY

            if not await self.check_rate_limit(user_id):
                return SELECTING_CATEGORY

            # –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_map = {
                'category_question': ('question', texts.QUESTION_PROMPT),
                'category_event': ('event', texts.EVENT_PROMPT),
                'category_advice': ('advice', texts.ADVICE_PROMPT),
                'start_book': ('book', "üìñ –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏..."),
                'create_bot': ('bot', "ü§ñ –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞...")
            }

            # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∫–Ω–∏–≥–∞/–±–æ—Ç
            if query.data in ['start_book', 'create_bot']:
                stage = Stage.STAGE2 if query.data == 'start_book' else Stage.STAGE3
                context.user_data['stage'] = stage
                category, _ = category_map[query.data]
                context.user_data['category'] = category

                status_msg = await self.show_generation_status(
                    user_id,
                    "üß† <b>–ü—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!</b>\n\n"
                    "–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç 5‚Äì10 —Å–µ–∫—É–Ω–¥.\n"
                    "–ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üí°"
                )

                try:
                    async with typing_action(self.application, user_id):
                        enhanced_prompt = await generate_enhanced_prompt(category=category, user_input="")

                    if "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å" in enhanced_prompt or len(enhanced_prompt.strip()) < 10:
                        await self.send_html_message(user_id, texts.API_ERROR_MESSAGE)
                        return SELECTING_CATEGORY

                    next_stage = Stage.STAGE3 if category == 'book' else Stage.STAGE4
                    footer = texts.BOOK_GENERATION_FOOTER if category == 'book' else texts.GENERATION_FOOTER
                    await self.send_prompt_template(user_id, enhanced_prompt, footer, category, next_stage)

                    if status_msg:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=status_msg.message_id)
                        except Exception:
                            pass

                except Exception as e:
                    bot_logger.error(f"Direct generation error: {type(e).__name__} - {str(e)[:200]}")
                    await self.send_html_message(user_id, texts.API_ERROR_MESSAGE)

                return SELECTING_CATEGORY

            # –≠—Ç–∞–ø 1: –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–æ–ø—Ä–æ—Å/—Å–æ–±—ã—Ç–∏–µ/—Å–æ–≤–µ—Ç)
            elif query.data in ['category_question', 'category_event', 'category_advice']:
                context.user_data['stage'] = Stage.STAGE1
                category, prompt_text = category_map[query.data]
                context.user_data['category'] = category
                
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE1], 
                                              texts.STAGE_INSTRUCTIONS["stage1_prompt"], get_stage1_keyboard())
                await self.send_html_message(user_id, prompt_text)
                return TYPING_PROMPT

            return SELECTING_CATEGORY

        except Exception as e:
            bot_logger.error(f"Category error: {type(e).__name__}")
            await self.send_html_message(update.effective_chat.id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return SELECTING_CATEGORY

    async def handle_button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ (–Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é)"""
        try:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id
            data = query.data

            if data == "check_subscription":
                is_subscribed = await check_subscription(user_id, self.channel_id, self.bot_instance)
                if is_subscribed:
                    context.user_data.clear()
                    await query.delete_message()
                    await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.COURSE], 
                                                  texts.COURSE_WELCOME, get_course_menu_keyboard())
                    return SELECTING_CATEGORY
                else:
                    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_caption(
                        caption=texts.NOT_SUBSCRIBED_MESSAGE,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                    return SELECTING_CATEGORY

            elif data == 'copy_prompt':
                await self.send_html_message(user_id, "üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ ‚Üí ¬´–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å¬ª. –¢–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Telegram!")
                return SELECTING_CATEGORY

            elif data == 'new_prompt':
                # –ú—è–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤
                now = datetime.now()
                if now - user_last_request[user_id] < timedelta(seconds=1):
                    await self.send_html_message(user_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
                    return TYPING_PROMPT
                user_last_request[user_id] = now

                context.user_data.clear()
                context.user_data['stage'] = Stage.STAGE1
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE1], 
                                              texts.WELCOME_MESSAGE, get_main_menu_keyboard())
                return TYPING_PROMPT

            elif data == Stage.COURSE.value:
                context.user_data.clear()
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.COURSE], 
                                              texts.COURSE_WELCOME, get_course_menu_keyboard())
                return SELECTING_CATEGORY

            elif data == Stage.STAGE1.value:
                context.user_data['stage'] = Stage.STAGE1
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE1], 
                                              texts.STAGE_INSTRUCTIONS["stage1_prompt"], get_stage1_keyboard())
                await self.send_html_message(user_id, texts.QUESTION_PROMPT)
                return TYPING_PROMPT

            elif data == 'open_stage2' or data == Stage.STAGE2.value:
                context.user_data['stage'] = Stage.STAGE2
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE2], 
                                              texts.STAGE_INSTRUCTIONS["stage2_book"], get_book_keyboard())
                return SELECTING_CATEGORY

            elif data == 'open_stage3' or data == Stage.STAGE3.value:
                context.user_data['stage'] = Stage.STAGE3
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE3], 
                                              texts.STAGE_INSTRUCTIONS["stage3_code"], get_bot_keyboard())
                return SELECTING_CATEGORY

            elif data == Stage.STAGE4.value:
                context.user_data['stage'] = Stage.STAGE4
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE4], 
                                              texts.STAGE_INSTRUCTIONS["stage4_image"] + "\n\nüìù –û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω—É –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π:")
                return TYPING_PROMPT

            elif data == Stage.STAGE5.value:
                context.user_data['stage'] = Stage.STAGE5
                await query.delete_message()
                await self.send_html_with_photo(user_id, STAGE_IMAGES[Stage.STAGE5], 
                                              texts.STAGE_INSTRUCTIONS["stage5_video"] + "\n\nüìù –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é —Ä–æ–ª–∏–∫–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π:")
                return TYPING_PROMPT

            return SELECTING_CATEGORY

        except Exception as e:
            bot_logger.error(f"Callback error: {type(e).__name__}")
            await self.send_html_message(user_id, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return SELECTING_CATEGORY

    async def handle_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.message.from_user.id
            user_input = (update.message.text or "").strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            now = datetime.now()
            if now - user_last_request[user_id] < timedelta(seconds=1):
                await self.send_html_message(user_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
                return TYPING_PROMPT
            user_last_request[user_id] = now

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
            if not user_input:
                await self.send_html_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.")
                return TYPING_PROMPT
            if len(user_input) > 500:
                await self.send_html_message(user_id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ú–∞–∫—Å. 500 —Å–∏–º–≤.")
                return TYPING_PROMPT

            user_logger.info(f"{user_id}: {user_input[:100]}...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            if not await self.check_user_access(user_id):
                return SELECTING_CATEGORY

            if not await self.check_rate_limit(user_id):
                return TYPING_PROMPT

            # –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            if not await moderate_text(text=user_input):
                await self.send_html_message(user_id, texts.MODERATION_FAILED_MESSAGE)
                return TYPING_PROMPT

            # –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_msg = await self.show_generation_status(
                user_id,
                "üß† <b>–ü—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!</b>\n\n"
                "–ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç 5‚Äì10 —Å–µ–∫—É–Ω–¥.\n"
                "–ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üí°"
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            stage: Stage = context.user_data.get('stage', Stage.STAGE1)
            category = context.user_data.get('category', 'question')
            
            if stage == Stage.STAGE4:
                category = 'image'
            elif stage == Stage.STAGE5:
                category = 'video'

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
            async with typing_action(self.application, user_id):
                enhanced_prompt = await generate_enhanced_prompt(category=category, user_input=user_input)

            if "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å" in enhanced_prompt or len(enhanced_prompt.strip()) < 10:
                await self.send_html_message(user_id, texts.API_ERROR_MESSAGE)
                return SELECTING_CATEGORY

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
            next_stage_map = {
                Stage.STAGE1: Stage.STAGE2,
                Stage.STAGE2: Stage.STAGE3,
                Stage.STAGE3: Stage.STAGE4,
                Stage.STAGE4: Stage.STAGE5
            }
            next_stage = next_stage_map.get(stage)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            footer = texts.BOOK_GENERATION_FOOTER if category == 'book' else texts.GENERATION_FOOTER
            await self.send_prompt_template(user_id, enhanced_prompt, footer, category, next_stage)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if status_msg:
                try:
                    await context.bot.delete_message(chat_id=user_id, message_id=status_msg.message_id)
                except Exception:
                    pass

            return SELECTING_CATEGORY

        except Exception as e:
            bot_logger.error(f"Input error: {type(e).__name__} - {str(e)[:200]}")
            await self.send_html_message(update.effective_chat.id, texts.API_ERROR_MESSAGE)
            return SELECTING_CATEGORY

    async def handle_non_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.send_html_message(update.effective_chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return TYPING_PROMPT

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start), CommandHandler('menu', self.menu)],
            states={
                SELECTING_CATEGORY: [
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≠—Ç–∞–ø–∞ 1 –∏ –ø—Ä—è–º—ã–µ –∑–∞–ø—É—Å–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
                    CallbackQueryHandler(self.handle_category_selection, pattern=r'^(category_(question|event|advice)|start_book|create_bot)$'),
                    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
                    CallbackQueryHandler(self.handle_button_callback),
                ],
                TYPING_PROMPT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_user_input),
                    CallbackQueryHandler(self.handle_button_callback),
                ],
            },
            fallbacks=[CommandHandler('start', self.start), CommandHandler('menu', self.menu)],
            allow_reentry=True,
            per_message=False,
            per_chat=True
        )

        self.application.add_handler(conv_handler)
        self.application.add_handler(MessageHandler(~filters.TEXT, self.handle_non_text))

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.setup_handlers()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("üîó GigaChat API: –∞–∫—Ç–∏–≤–µ–Ω")
        print(f"ü§ñ @{os.getenv('BOT_USERNAME', 'unknown_bot')}")
        self.application.run_polling()

if __name__ == '__main__':
    try:
        check_environment_variables()
        bot = PromptBot()
        bot.run()
    except EnvironmentError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}")
        bot_logger.error(f"CRITICAL: {type(e).__name__} - {str(e)[:300]}")